version: '3.8'

services:
  # =============================================================================
  # SHARED SERVICES (Used by all profiles)
  # =============================================================================
  
  # Database Service (TimescaleDB) - Shared between all services
  db:
    image: timescale/timescaledb:latest-pg14
    container_name: cosmic-market-oracle-db
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-cosmic_market_oracle}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cosmic-network

  # =============================================================================
  # PRODUCTION SERVICES (Profile: production)
  # =============================================================================
  
  # API Service
  api:
    build: .
    container_name: cosmic-market-oracle-api
    restart: always
    ports:
      - "8000:8000"
    environment:
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-cosmic_market_oracle}
      - EPHE_PATH=/app/data/ephemeris
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - db
      - mlflow
    networks:
      - cosmic-network
    profiles:
      - production

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: cosmic-market-oracle-mlflow
    restart: always
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=${MINIO_ACCESS_KEY:-minioadmin}
      - AWS_SECRET_ACCESS_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MLFLOW_TRACKING_URI=http://localhost:5000
    command: >
      mlflow server 
      --backend-store-uri postgresql://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-cosmic_market_oracle}
      --default-artifact-root s3://mlflow/
      --host 0.0.0.0
    depends_on:
      - db
      - minio
    networks:
      - cosmic-network
    profiles:
      - production

  # MinIO for artifact storage
  minio:
    image: minio/minio:latest
    container_name: cosmic-market-oracle-minio
    restart: always
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    networks:
      - cosmic-network
    profiles:
      - production

  # Nginx for API Gateway and SSL termination
  nginx:
    image: nginx:latest
    container_name: cosmic-market-oracle-nginx
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api
      - mlflow
    networks:
      - cosmic-network
    profiles:
      - production

  # =============================================================================
  # DEVELOPMENT SERVICES (Profile: development)
  # =============================================================================
  
  # Airflow Webserver for data pipeline orchestration
  airflow-webserver:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow
    container_name: cosmic_airflow_webserver
    restart: unless-stopped
    depends_on:
      - db
      - airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-cosmic_market_oracle}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    volumes:
      - ./src/data_acquisition/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - cosmic-network
    profiles:
      - development

  # Airflow Scheduler
  airflow-scheduler:
    build:
      context: .
      dockerfile: docker/Dockerfile.airflow
    container_name: cosmic_airflow_scheduler
    restart: unless-stopped
    depends_on:
      - db
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://${DB_USER:-postgres}:${DB_PASSWORD:-postgres}@db:5432/${DB_NAME:-cosmic_market_oracle}
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ./src/data_acquisition/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    command: scheduler
    networks:
      - cosmic-network
    profiles:
      - development

  # Jupyter notebook for interactive development
  jupyter:
    build:
      context: .
      dockerfile: docker/Dockerfile.gpu
    container_name: cosmic_jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ./:/app
      - model_data:/app/data/models
      - checkpoint_data:/app/data/checkpoints
    ports:
      - "8888:8888"
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='cosmic'
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - cosmic-network
    profiles:
      - development

  # =============================================================================
  # MONITORING SERVICES (Profile: monitoring)
  # =============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: cosmic-market-oracle-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - cosmic-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: cosmic-market-oracle-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    networks:
      - cosmic-network
    profiles:
      - monitoring

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: cosmic-market-oracle-loki
    restart: always
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki:/etc/loki
      - loki_data:/loki
    command: -config.file=/etc/loki/loki-config.yml
    networks:
      - cosmic-network
    profiles:
      - monitoring

  # Promtail for log collection
  promtail:
    image: grafana/promtail:latest
    container_name: cosmic-market-oracle-promtail
    restart: always
    volumes:
      - ./logs:/var/log/cosmic-market-oracle
      - ./monitoring/promtail:/etc/promtail
      - /var/log:/var/log
    command: -config.file=/etc/promtail/promtail-config.yml
    networks:
      - cosmic-network
    depends_on:
      - loki
    profiles:
      - monitoring

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: cosmic-market-oracle-jaeger
    restart: always
    ports:
      - "16686:16686"  # UI
      - "14268:14268"  # Collector HTTP
      - "6831:6831/udp"  # Agent
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=9411
    networks:
      - cosmic-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  minio_data:
  airflow_logs:
  model_data:
  checkpoint_data:
  prometheus_data:
  grafana_data:
  loki_data:

networks:
  cosmic-network:
    driver: bridge