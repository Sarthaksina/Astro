name: Model Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    branches: [main]
    types: [completed]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      model_name:
        description: 'Model name to deploy'
        required: true
        type: string
      model_version:
        description: 'Model version to deploy'
        required: true
        type: string

jobs:
  validate-and-deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Set environment variables
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "MODEL_NAME=${{ github.event.inputs.model_name }}" >> $GITHUB_ENV
          echo "MODEL_VERSION=${{ github.event.inputs.model_version }}" >> $GITHUB_ENV
        else
          # For automated deployments, use latest model from registry
          # This would be replaced with actual model registry query in production
          echo "ENVIRONMENT=staging" >> $GITHUB_ENV
          echo "MODEL_NAME=latest_model" >> $GITHUB_ENV
          echo "MODEL_VERSION=latest" >> $GITHUB_ENV
        fi

    - name: Validate and deploy model
      run: |
        python -c "from ci_cd.pipeline_config import CIPipelineConfig; \
                  config = CIPipelineConfig(config_path='ci_cd/config.yaml'); \
                  config.environment = '${{ env.ENVIRONMENT }}'; \
                  model_info = {'name': '${{ env.MODEL_NAME }}', \
                              'version': '${{ env.MODEL_VERSION }}', \
                              'path': 'models/${{ env.MODEL_NAME }}/${{ env.MODEL_VERSION }}'}; \
                  results = config.run_pipeline(model_info=model_info); \
                  import sys; \
                  if not results['deployment'].get('${{ env.ENVIRONMENT }}', False): \
                    sys.exit(1)"

    - name: Upload deployment results
      uses: actions/upload-artifact@v3
      with:
        name: deployment-results
        path: ci_cd/pipelines/run_*/deployment_*.json

    - name: Set up monitoring
      if: success()
      run: |
        # This would be replaced with actual monitoring setup in production
        echo "Setting up monitoring for ${{ env.MODEL_NAME }} version ${{ env.MODEL_VERSION }} in ${{ env.ENVIRONMENT }}"
        
    - name: Send deployment notification
      if: always()
      run: |
        # This would be replaced with actual notification logic in production
        if [ "${{ job.status }}" == "success" ]; then
          echo "Deployment of ${{ env.MODEL_NAME }} version ${{ env.MODEL_VERSION }} to ${{ env.ENVIRONMENT }} succeeded"
        else
          echo "Deployment of ${{ env.MODEL_NAME }} version ${{ env.MODEL_VERSION }} to ${{ env.ENVIRONMENT }} failed"
        fi