version: '3.8'

services:
  # TimescaleDB for time-series data storage
  timescaledb:
    image: timescale/timescaledb:latest-pg14
    container_name: cosmic_timescaledb
    restart: unless-stopped
    environment:
      - POSTGRES_USER=cosmic
      - POSTGRES_PASSWORD=cosmic_password
      - POSTGRES_DB=cosmic_market_oracle
    volumes:
      - timescale_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "cosmic"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Airflow for data pipeline orchestration
  airflow-webserver:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: cosmic_airflow_webserver
    restart: unless-stopped
    depends_on:
      - timescaledb
      - airflow-scheduler
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://cosmic:cosmic_password@timescaledb:5432/cosmic_market_oracle
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
      - AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True
    volumes:
      - ../src/data_acquisition/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  airflow-scheduler:
    build:
      context: ..
      dockerfile: docker/Dockerfile.airflow
    container_name: cosmic_airflow_scheduler
    restart: unless-stopped
    depends_on:
      - timescaledb
    environment:
      - AIRFLOW__CORE__EXECUTOR=LocalExecutor
      - AIRFLOW__CORE__SQL_ALCHEMY_CONN=postgresql+psycopg2://cosmic:cosmic_password@timescaledb:5432/cosmic_market_oracle
      - AIRFLOW__CORE__FERNET_KEY=${AIRFLOW_FERNET_KEY:-}
      - AIRFLOW__CORE__LOAD_EXAMPLES=False
    volumes:
      - ../src/data_acquisition/dags:/opt/airflow/dags
      - airflow_logs:/opt/airflow/logs
    command: scheduler

  # Jupyter notebook for interactive development
  jupyter:
    build:
      context: ..
      dockerfile: docker/Dockerfile.gpu
    container_name: cosmic_jupyter
    restart: unless-stopped
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ../:/app
      - model_data:/app/data/models
      - checkpoint_data:/app/data/checkpoints
    ports:
      - "8888:8888"
    command: jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token='cosmic'
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

volumes:
  timescale_data:
  airflow_logs:
  model_data:
  checkpoint_data: